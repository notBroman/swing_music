package CS2020.assignment2;

import java.util.*;

// GUI imports
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;

public class GUI
{
    /*
     *  has a custom ActionListener to do something on action taken
     */
    /**
     *  @author Roman Berger
     *
     *  class that constructs GUI
     *
     *  has a custom actionlistener implementation
     *  has a custom ListCellRenderer implementation
     *  has a custom SelectionListener implementation
     *
     *  the only field is the main frame generated by the class
     */

    private JFrame mainFrame = new JFrame("Roman Berger:Assessment 2");

    /**
     *  nested custom actionListener for the menues
     *
     *  has some utility functions to make code more concise
     *  adapted from examplefound at
     *
     *  @see
     *  <https://www.tutorialspoint.com/swingexamples/creating_menu_bar.htm>
     */
    class MenuActionListener implements ActionListener {
        /*
         *  adapted the example found at:
         *  https://www.tutorialspoint.com/swingexamples/creating_menu_bar.htm
         */

        /**
         *  @param
         *  none
         *
         *  @return
         *  the Jlist in the viewport of the Jscrollpane found in the west part of the mainframe
         */
        public JList<Artist> getList()
        {
            BorderLayout bLayout = (BorderLayout) mainFrame.getContentPane().getLayout();
            JScrollPane scrollPane = (JScrollPane) bLayout.getLayoutComponent(BorderLayout.CENTER);
            return (JList) scrollPane.getViewport().getView();
        }

        /**
         *  @parm
         *  none
         *
         *  @return
         *  an arraylist with the three buttons at the bottom in it
         */
        public ArrayList<JButton> getSouthButtons()
        {
            BorderLayout bLayout = (BorderLayout) mainFrame.getContentPane().getLayout();
            JPanel southPane = (JPanel) bLayout.getLayoutComponent(BorderLayout.SOUTH);
            ArrayList<JButton> southButton = new ArrayList<>();
            for(Component b : southPane.getComponents())
            {
                southButton.add((JButton) b);
            }

            return southButton;
        }

        /**
         *  The actionHandler of the class overrides the function of the defaultActionHandler
         *
         * @param
         * actionevent e
         *
         * @return
         * none
         *
         * handles the behaviour of the gui buttons after it is first created
         */
        @Override
        public void actionPerformed(ActionEvent e)
        {
            String event = e.getActionCommand();

            switch(event)
            {
                case "About":
                    // create new frame for About popup
                    JFrame aboutFrame = new JFrame("About");
                    aboutFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                    aboutFrame.setLayout(new BorderLayout());

                    Icon javaIcon = new ImageIcon( this.getClass().getResource( "/java_logo.jpg" ));
                    JLabel appInfo = new JLabel("Assignment 2 App v1.0.0", javaIcon, SwingConstants.LEFT);
                    JButton okButton = new JButton("Ok");
                    okButton.setActionCommand("Exit");
                    okButton.addActionListener(new MenuActionListener());


                    aboutFrame.getContentPane().add(appInfo, BorderLayout.NORTH);
                    aboutFrame.getContentPane().add(okButton, BorderLayout.EAST);

                    // good size may be (300, 200)
                    aboutFrame.pack();
                    aboutFrame.setVisible(true);
                    break;

                case "manualData":
                    // find the JList<Artist> in the scrollpane
                    // addExampleArtists
                    // disable button afterwards
                    Utils.createExampleArtists(this.getList());
                    ArrayList<JButton> southButtons = getSouthButtons();
                    southButtons.get(0).setEnabled(false);
                    southButtons.get(2).setEnabled(true);
                    break;

                case "databaseData":
                    // add data from database
                    Utils.readArtistsAndSongsFromDatabase(this.getList());
                    ArrayList<JButton> southButtons1 = getSouthButtons();
                    southButtons1.get(1).setEnabled(false);
                    southButtons1.get(2).setEnabled(true);

                    break;

                case "deleteData":
                    // delete selected data from list
                    JComponent comp0 = (JComponent) e.getSource();
                    JFrame frm0 = (JFrame) SwingUtilities.getWindowAncestor(comp0);
                    frm0.dispose();

                    JList<Artist> artistListDel = this.getList();
                    ArrayList<JButton> southButtons2 = getSouthButtons();
                    int idxDel = artistListDel.getSelectedIndex();
                    if(idxDel != -1)
                    {
                        DefaultListModel modelDel = (DefaultListModel) artistListDel.getModel();
                        modelDel.remove(idxDel);
                        artistListDel.setModel(modelDel);
                        artistListDel.setSelectedIndex(-1);
                        artistListDel.setSelectedIndex(0);
                    }
                    if(artistListDel.getFirstVisibleIndex() == -1)
                    {
                        southButtons2.get(0).setEnabled(true);
                        southButtons2.get(1).setEnabled(true);
                        southButtons2.get(2).setEnabled(false);
                    }

                    break;

                case "Exit":
                    // get frame in which button resides
                    // close frame
                    JComponent comp = (JComponent) e.getSource();
                    JFrame frm = (JFrame) SwingUtilities.getWindowAncestor(comp);
                    frm.dispose();
                    break;

                case "AreYouSure":
                    // create new frame for About popup
                    JFrame sureFrame = new JFrame("Select an Option");
                    sureFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                    sureFrame.setLayout(new BorderLayout());

                    Icon javaIcon1 = new ImageIcon( this.getClass().getResource( "/java_logo.jpg" ));
                    JLabel appInfo1 = new JLabel("Are you sure?", javaIcon1, SwingConstants.LEFT);
                    JButton cancelButton = new JButton("Cancel");
                    cancelButton.setActionCommand("Exit");
                    cancelButton.addActionListener(this);

                    JButton noButton = new JButton("No");
                    noButton.setActionCommand("Exit");
                    noButton.addActionListener(this);

                    JButton yesButton = new JButton("Yes");
                    yesButton.setActionCommand("deleteData");
                    yesButton.addActionListener(this);

                    JPanel pane = new JPanel();
                    pane.add(cancelButton, BorderLayout.WEST);
                    pane.add(noButton, BorderLayout.CENTER);
                    pane.add(yesButton, BorderLayout.EAST);

                    sureFrame.getContentPane().add(appInfo1, BorderLayout.NORTH);
                    sureFrame.getContentPane().add(pane, BorderLayout.CENTER);

                    // good size may be (300, 200)
                    sureFrame.pack();
                    sureFrame.setVisible(true);
                    break;

                default:
                    System.out.println("event occured");
                    break;
            }
        }
    }

    /**
     *  SelectionHandeler
     *
     *  handles the behaviour when elements of the list in the west are selected
     */
    public class ListSelectionHandler implements ListSelectionListener
    {
        @Override
        public void valueChanged(ListSelectionEvent e)
        {
            // display information in EAST borderLayout when selection changes
            JList list1 = (JList) e.getSource();
            // get the list and artist object which is selected
            Artist artist1 = (Artist) list1.getSelectedValue();

            // get frame to fill in data in BorderLayout.EAST panel
            JFrame frm1 = (JFrame) SwingUtilities.getWindowAncestor(list1);
            BorderLayout bLayout1 = (BorderLayout) frm1.getContentPane().getLayout();
            JPanel eastPanel = (JPanel) bLayout1.getLayoutComponent(BorderLayout.EAST);

            // get Layout of panel at BorderLayout.EAST in mainframe and components
            BorderLayout panelLayout = (BorderLayout) eastPanel.getLayout();
            JPanel dataPanel = (JPanel) panelLayout.getLayoutComponent(BorderLayout.NORTH);
            JScrollPane scrollTextArea = (JScrollPane) panelLayout.getLayoutComponent(BorderLayout.CENTER);
            JTextArea songArea = (JTextArea) scrollTextArea.getViewport().getView();

            ArrayList<JTextField> txtF = new ArrayList<>();
            for(Component c : dataPanel.getComponents())
            {
                if(c instanceof JTextField)
                {
                    txtF.add((JTextField) c);
                }
            }

            if(list1.getSelectedIndex() > -1)
            {
                // write dob, placeOfBirth & bornOnWeekend to TextFields in dataPanel
                // TextField attached to GridLayout
                txtF.get(0).setText(artist1.getDob());
                txtF.get(1).setText(artist1.getPlaceOfBirth());
                if(Utils.checkIfBornOnWeekend(artist1.getDob()))
                {
                    txtF.get(2).setText("yes");
                }
                else
                {
                    txtF.get(2).setText("no");
                }

                int i = 1;
                String songText = "";
                // System.out.println(artist1.getSongs());
                HashMap<UUID,String> formattedSongs = Utils.returnSongDurationAndTitleFormatted(artist1.getSongs());
                for(UUID key : formattedSongs.keySet())
                {
                    songText = songText + Integer.toString(i) + ". " + formattedSongs.get(key) + "\n";
                    i++;
                }

                songArea.setText(songText);

            }
            else
            {
                txtF.get(0).setText("");
                txtF.get(1).setText("");
                txtF.get(2).setText("");
                songArea.setText("");
            }

        }
    }

    /**
     *  ListCellRenderer
     *
     *  prevents the list from only listing the addresses of the objects
     */
    public class ArtistListCellRenderer extends DefaultListCellRenderer
    {
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if(value instanceof Artist)
            {
                Artist artist = (Artist) value;
                setText("" + artist.getFirstName() + " " + artist.getLastName());
                // no tooltip
                // no icon
            }
            return this;
        }
    }

    /**
     *  constructs the GUI
     *
     *  @param
     *  none
     *
     *  @return
     *  none
     *
     *  draws the GUI on the screen of the user
     */
    public void constructGui()
    {
        /*
         *  construct the GUI window as in the instruction
         *
         *  construct a JFrame with title Roman Berger:assignment2
         *  using BorderLayout
         *
         *  north:
         *  menu bar with options:
         *  - About
         *  - Data
         *  - Export to CSV
         *
         *  West:
         *  - scrollable JList
         *
         *  East:
         *  - Fields with DoB, PlaceOfBirth, BornOnWeekend
         *  - JList of Songs
         *
         *  south:
         *  three buttons
         *  - Add Data Manually
         *  - Add Date From Database
         *  - Delete Selected
         */

        // Create the frame with the title <name>:assignment 2
        this.mainFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        // Create the menubar
        JMenuBar menubar1 = new JMenuBar();

        // Create menu items to add to menu
        JMenuItem aboutMenuItem = new JMenuItem("About");
        aboutMenuItem.setPreferredSize(new Dimension(30, 20));
        aboutMenuItem.setActionCommand("About");

        JMenuItem dataMenuItem = new JMenuItem("Data");
        dataMenuItem.setPreferredSize(new Dimension(30, 20));
        dataMenuItem.setActionCommand("Data");

        JMenuItem exportMenuItem = new JMenuItem("Export As CSV");
        exportMenuItem.setPreferredSize(new Dimension(650, 20));
        exportMenuItem.setActionCommand("Export");

        // create and attach actionListeners to the menuItems
        MenuActionListener menuListener = new MenuActionListener();

        aboutMenuItem.addActionListener(menuListener);
        dataMenuItem.addActionListener(menuListener);
        exportMenuItem.addActionListener(menuListener);

        // add MenuItems to menubar
        menubar1.add(aboutMenuItem);
        menubar1.add(dataMenuItem);
        menubar1.add(exportMenuItem);


        // create JList to add artists to
        // create JScrollPane with JList as Viewport
        DefaultListModel model = new DefaultListModel();
        JList<Artist> artistList = new JList<>(model);
        artistList.setCellRenderer(new ArtistListCellRenderer());
        artistList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        artistList.addListSelectionListener(new ListSelectionHandler());

        JScrollPane artistPane = new JScrollPane(artistList);
        artistPane.setVerticalScrollBar(artistPane.createVerticalScrollBar());
        artistPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        // create JPanel to add 3 buttons to
        // attach to SOUTH of frame
        JPanel southPane = new JPanel();
        JButton manualData = new JButton("Add Data Manually");
        manualData.setActionCommand("manualData");
        JButton dbData = new JButton("Add Data From Database");
        dbData.setActionCommand("databaseData");
        JButton delData = new JButton("Delete Selected");
        delData.setActionCommand("AreYouSure");

        // add ActionListeners to buttons
        manualData.addActionListener(menuListener);
        dbData.addActionListener(menuListener);
        delData.addActionListener(menuListener);
        delData.setEnabled(false);

        southPane.add(manualData, BorderLayout.EAST);
        southPane.add(dbData, BorderLayout.CENTER);
        southPane.add(delData, BorderLayout.WEST);

        // create JPanel to add JPanel and textArea to
        // attach to EAST of frame
        JPanel eastPane = new JPanel();
        eastPane.setLayout(new BorderLayout());
        JTextArea textArea = new JTextArea("1.", 10, 20);
        JScrollPane scrollText = new JScrollPane(textArea);

        // create JPanel for the the data fields above the TextField
        JPanel dataPane = new JPanel();
        dataPane.setLayout(new GridLayout(3, 2, 10, 5));

        JLabel dobLabel = new JLabel("Date of Birth:");
        JLabel pobLabel = new JLabel("Place of Birth:");
        JLabel weekendLabel = new JLabel("Born on Weekend:");

        JTextField dobField = new JTextField(6);
        dobField.setEditable(false);
        JTextField pobField = new JTextField(6);
        pobField.setEditable(false);
        JTextField weekendField = new JTextField(6);
        weekendField.setEditable(false);

        //fill JPanel for data
        dataPane.add(dobLabel);
        dataPane.add(dobField);
        dataPane.add(pobLabel);
        dataPane.add(pobField);
        dataPane.add(weekendLabel);
        dataPane.add(weekendField);

        // add dataPanel and TextField to Panel
        eastPane.add(dataPane, BorderLayout.NORTH);
        eastPane.add(scrollText, BorderLayout.CENTER);

        this.mainFrame.setSize(800, 600);
        // settings of menubar
        menubar1.setBorderPainted(true);
        // add components to BorderLayout
        this.mainFrame.getContentPane().add(menubar1, BorderLayout.NORTH);
        this.mainFrame.getContentPane().add(artistPane, BorderLayout.CENTER);
        this.mainFrame.getContentPane().add(eastPane, BorderLayout.EAST);
        this.mainFrame.getContentPane().add(southPane, BorderLayout.SOUTH);
        // make frame visible - last operation
        this.mainFrame.setVisible(true);


    }
}
